__author__ = 'tyler'

"""gd_sequence map: A class for storing information about mutations found in Genomediff files in predefined mappings.

This class is designed to simplify analysis and processing of Genomediff files. It stores the counts of various kinds
of mutations, organized in different dictionaries according to certain conditions; an example would be the type_map,
which organizes mutations by type.

This class is designed to work with the gd_sequence_mapper script. Details about that script can be found there or in
the documentation.

To add in future releases:
-integrate all possible mutation/evidence events generated by breseq tool"""

import sys
class GenomeDiffSequenceMap:



    """__init__: instantiate all instance attributes"""
    def __init__(self):
        # Define mappings.
        self.type_map = dict()
        self.feat_map = dict()
        self.type_feat_map = dict()
        self.feat_type_map = dict()

        # Initialize all counts to 0.
        self.total_count = 0
        return

    def get_count(self):
        return self.total_count

    def output(self):

        mob_count = 0
        del_count = 0
        ins_count = 0
        snp_count = 0
        for type in self.type_map:
            if type == 'MOB':
                mob_count += self.type_map[type]
            if type == 'INS':
                ins_count += self.type_map[type]
            if type == 'DEL':
                del_count += self.type_map[type]
            if type == 'SNP':
                snp_count += self.type_map[type]
        total_count = self.total_count

        return [mob_count, ins_count, del_count, snp_count]
    def update_count(self):
        self.total_count += 1
        return

    def update_type_map(self, type):
        if type in self.type_map.keys():
            self.type_map[type] += 1
        else:
            self.type_map.update({type:1})
        return

    def update_feature_map(self, feat):
        if feat in self.feat_map.keys():
            self.feat_map[feat] += 1
        else:
            self.feat_map.update({feat:1})
        return

    def update_type_feat_map(self, type, feat):
        if type in self.type_feat_map.keys():
            if feat in self.type_feat_map[type]:
                # Both keys exist in respective dictionaries
                self.type_feat_map[type][feat] += 1
            else:
                # Need to add key 'feat' to type_feat_map[type] dict
                self.type_feat_map[type].update({feat:1})
        # Must create type dictionary
        else:
            self.type_feat_map.update({type:dict()})
            self.type_feat_map[type].update({feat:1})
        return

    def update_feat_type_map(self, feat, type):
        if feat in self.feat_type_map.keys():
            if type in self.feat_type_map[feat].keys():
                # Both keys exist
                self.feat_type_map[feat][type] += 1
            else:
                self.feat_type_map[feat].update({type:1})
        # Create dictionaries
        else:
            self.feat_type_map.update({feat:dict()})
            self.feat_type_map[feat].update({type:1})
        return
